// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String    @unique
  password         String?
  image            String?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Address          Address[]
}

model Address {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  user          User   @relation(fields: [userEmail], references: [email])
  userEmail     String
  name          String
  streetAddress String
  state         String
  city          String
  zipCode       String
}

model Product {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  eLiquidContent  String    @default("")
  batteryCapacity String    @default("")
  coil            String    @default("")
  firingMechanism String    @default("")
  type            String    @default("")
  brand           Brand?    @relation(fields: [brandId], references: [id])
  brandId         String?   @db.ObjectId
  flavor          Flavor?   @relation(fields: [flavorId], references: [id])
  flavorId        String?   @db.ObjectId
  Puffs           Puffs?    @relation(fields: [puffsId], references: [id])
  puffsId         String?   @db.ObjectId
  Nicotine        Nicotine? @relation(fields: [nicotineId], references: [id])
  nicotineId      String?   @db.ObjectId
  images          Image[]
  currentPrice    Float
  originalPrice   Float
  isArchived      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Flavor {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Puffs {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Nicotine {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  position  Int?
  productId String?  @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  items     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
